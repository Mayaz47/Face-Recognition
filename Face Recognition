import cv2
import face_recognition
import os
import webbrowser
# Load the video file

video_capture = cv2.VideoCapture(0)
if not video_capture.isOpened():
    print('Error: Failed to open video file.')

# Initialize variables
face_locations = []
face_encodings = []
face_names = []
frame_count = 0

# Load the known faces and their names
known_face_encodings = []
known_face_names = []
known_faces_folder = 'F:/WillsFaces/'

for filename in os.listdir(known_faces_folder):
    if filename.endswith('.jpg'):
        # Load the image and extract the face encoding
        image = face_recognition.load_image_file(known_faces_folder + filename)
        face_encoding = face_recognition.face_encodings(image)[0]
        # Add the face encoding and name to the list of known faces
        known_face_encodings.append(face_encoding)
        known_face_names.append(filename.split('.')[0])

while True:
    # Grab a single frame of video
    ret, frame = video_capture.read()
    frame_count += 1

    # Resize the frame to make processing faster
    try:
        small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
    
        # Convert the image from BGR color to RGB color
        rgb_small_frame = small_frame[:, :, ::-1]
    
    except Exception as e:
        print(e)
        SystemExit("Done")
    # Only process every other frame to save time
    if frame_count % 2 == 0:
        # Find all the faces in the current frame of video
        face_locations = face_recognition.face_locations(small_frame)
        face_encodings = face_recognition.face_encodings(small_frame, face_locations)

        face_names = []
        for face_encoding in face_encodings:
            # See if the face is a match for the known faces
            matches = face_recognition.compare_faces(known_face_encodings, face_encoding, tolerance=0.5)
            name = "Unknown"

            # If a match was found in known_face_encodings, use the first one.
            if True in matches:
                first_match_index = matches.index(True)
                name = known_face_names[first_match_index]
                if name != "Unknown":
                    url = 'https://www.'+name+'.com'

                    # Open URL in a new tab
                    

            face_names.append(name)

    # Display the results
    for (top, right, bottom, left), name in zip(face_locations, face_names):
        # Scale back up face locations since the frame we detected in was scaled to 1/4 size
        top *= 4
        right *= 4
        bottom *= 4
        left *= 4

        # Draw a box around the face
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)

        # Draw a label with a name below the face
        cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 0, 255), cv2.FILLED)
        font = cv2.FONT_HERSHEY_DUPLEX
        cv2.putText(frame, name, (left + 6, bottom - 6), font, 1.0, (255, 255, 255), 1)

    # Display the resulting image
    
    if ret:
        cv2.imshow('Video', frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            webbrowser.open_new_tab(url)
            break
    else:
        video_capture.set(cv2.CAP_PROP_POS_FRAMES, 0)

    # Exit loop if 'q' is pressed
        

# Release handle to the webcam
video_capture.release()
cv2.destroyAllWindows()
